float posToDepth(vec3 viewPos,float znear,float zfar) {
  float d=1.0/(zfar - znear);
  
  //ortho
  //float p10=2.0, p11=znear-zfar; 
  
  //perspective
  float p10=zfar+znear, p11=2.0*zfar*znear; 

  //
  float clipZ=(p10*viewPos.z+p11)*d;
  float clipW=-mvZ;
  float ndcZ = clipZ/clipW;
  
  //
  float nearRange=0.0;
  float farRange=1.0;
  
  return (((farRange-nearRange)*ndcZ)+nearRange+farRange)/2.0;
}

vec3 depthToPos(mat4 invProjMat,vec2 screen,float depth) {
  vec4 H=vec4(vec3(screen,depth)*2.0-1.0,1.0);//screen.xy between -1 and 1
  vec4 D=invProjMat*H;
  return D.xyz/D.w;
}

float linearDepth(float depth,float znear,float zfar) {
  return (2.0*znear)/(zfar+znear-depth*(zfar-znear));
}

void mat4_frustum(float *out,float left,float right,float bottom,float top,float zNear,float zFar) {
  memset(out,0,sizeof(float)*16);

  out[0]=(2.0f*zNear)/(right-left); //x
  out[2]=(right+left)/(right-left); //A
  out[5]=(2.0f*zNear)/(top-bottom); //y
  out[6]=(top+bottom)/(top-bottom); //B
  out[10]=-(zFar+zNear)/(zFar-zNear); //C
  out[11]=-(2.0f*zFar*zNear)/(zFar-zNear); //D
  out[14]=-1.0f;
}

void mat4_perspective_fovx(float *out,float fovx,float aspect,float znear,float zfar) {
  float right=tan(fovx/2.0f)*znear;
  float top=right/aspect;
  
  mat4_frustum(out,-right,right,-top,top,znear,zfar);
}

void mat4_perspective_fovy(float *out,float fovy,float aspect,float znear,float zfar) {
  float top=tan(fovy/2.0f)*znear;
  float right=top*aspect;
  
  mat4_frustum(out,-right,right,-top,top,znear,zfar);
}

void mat4_ortho(float *out,float left,float right,float bottom,float top,float nearVal,float farVal) {
  memset(out,0,sizeof(float)*16);

  out[0]=2.0f/(right-left);
  out[3]=-(right+left)/(right-left); //tx
  out[5]=2.0f/(top-bottom);
  out[7]=-(top+bottom)/(top-bottom); //ty
  out[10]=-2.0f/(nearVal-farVal);
  out[11]=-(farVal+nearVal)/(farVal-nearVal); //tz
  out[15]=1.0f;
}

void mat4_ortho2d(float *out,float left,float right,float bottom,float top) {
  mat4_ortho(out,left,right,bottom,top,-1.0f,1.0f);
}

=========================
//from aras-p.info/texts/CompactNormalStorage.html
  
vec3 decodeNorSphereMap(vec2 enc) {
  vec2 fenc = enc*4.0-2.0;
  float f = dot(fenc,fenc);
  float g = sqrt(1.0-f/4.0);
  return vec3(fenc*g,1.0-f/2.0);
}

vec2 encodeNorSphereMap(vec3 n) {
  return n.xy/sqrt(8.0*n.z+8.0) + 0.5;
}
=========================
mat3 rotX(float a) {
	float c=cos(a);
	float s=sin(a);
	return mat3(1.0,0.0,0.0, 0.0,c,s, 0.0,-s,c);
}

mat3 rotY(float a) {
	float c=cos(a);
	float s=sin(a);
	return mat3(c,0.0,-s, 0.0,1.0,0.0, s,0.0,c);
}

mat3 rotZ(float a) {
	float c=cos(a);
	float s=sin(a);
	return mat3(c,s,0.0, -s,c,0.0, 0.0,0.0,1.0);
}

mat3 rotAxis(vec3 axis, float a) {
    float s=sin(a);
    float c=cos(a);
    float oc=1.0-c;
	
    return mat3(oc*axis.x*axis.x+c,        oc*axis.x*axis.y-axis.z*s, oc*axis.z*axis.x+axis.y*s,
                oc*axis.x*axis.y+axis.z*s, oc*axis.y*axis.y+c,        oc*axis.y*axis.z-axis.x*s,
                oc*axis.z*axis.x-axis.y*s, oc*axis.y*axis.z+axis.x*s, oc*axis.z*axis.z+c);
}
=========================
float smoothStep(float a,float b,float x) {
  float t = clamp((x-a)/(b-a),0.0,1.0);
  return t*t*(3.0-2.0*t);
}

float lerp(float f0,float f1,float u) {
  return (1.0-u)*f0+u*f1;
}

float dolerp() {
  float f=(time-framePos1)/(framePos2-framePos1);
  return lerp(val1,val2,smoothStep(0.0,1.0,f));
}
=========================
void main() {
  //Air 1.00
  //Water 1.33
  //Ice 1.309
  //Glass 1.52
  //Diamond 2.42

  float ratio = 1.00 / 1.52;
  vec3 I = normalize(Position - cameraPos);
  vec3 R = refract(I, normalize(Normal), ratio);
  color = texture(skybox, R);
}
=========================
vec4 calcTangent(vec3 pt0,vec3 pt1,vec3 pt2,vec2 uv0,vec2 uv1,vec2 uv2,vec3 nor) {
  vec3 e0=pt1-pt0;
  vec3 e1=pt2-pt0;
  vec3 e0_uv=uv1-uv0;
  vec3 e1_uv=uv2-uv0;

  float cp=e0_uv.x*e1_uv.y-e0_uv.y*e1_uv.x;

  if(cp == 0.0) {
    return vec4(0.0);
  }
  
  float r=1.0/cp;
  
  vec3 sdir=(e0*e1_uv.y-e1*e0_uv.y)*r
  vec3 tdir=(e1*e0_uv.x-e0*e1_uv.x)*r
  
  vec3 tg=normalize(sdir-nor*dot(nor,sdir));
  float w=(dot(cross(nor,sdir),tdir)<0.0)?-1.0:1.0;
  
  //bt=w*cross(nor,tg)
  //dot(cross(T,B),N)?

  return vec4(tg,w);
}

void usage() {
  n=normalize(u_normalMat*a_nor);
  t=normalize(u_normalMat*a_tan.xyz);
  b=normalize(a_tan.w*cross(n,t)); 

  tbnMatrix=mat3(t.x,b.x,n.x, t.y,b.y,n.y, t.z,b.z,n.z);

  pos=u_modelViewMat*vec4(a_pos,1.0);
  v_posTs=tbnMatrix*(pos.xyz/pos.w);
  
  nor=normalize(transpose(tbnMat)*normalize(2.0*norHgt.rgb-1.0));
}
=========================
    vec3 nor=vec3(0.0,0.0,1.0);
    vec3 tg= vec3(1.0,0.0,0.0);
    vec3 btg=vec3(0.0,1.0,0.0);
    
    mat3 invTbnMat=mat3(tg,btg,nor);
    mat3 tbnMat=transpose(invTbnMat);
	
        vec3 pt=ro+rd*t;		
        //vec2 viewTS=normalize(tbnMat*(ro-pt)).xy;
        vec2 viewTS=normalize(tbnMat*-rd).xy;
        vec2 texCoord=(invTbnMat*(pt-nor*dot(pt,nor))).xy*0.1; //uv=vec2(dot(p,I),dot(p,J));

        nor2=normalize(invTbnMat*nor2);
=========================
